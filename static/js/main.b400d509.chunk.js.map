{"version":3,"sources":["components/footer/index.js","components/header/index.js","components/imgContainer/index.js","components/navbar/index.js","App.js","serviceWorker.js","index.js"],"names":["Footer","className","class","Header","Cards","props","onClick","handleClickedImage","id","alt","name","src","image","Navbar","score","topScore","shuffle","array","i","length","j","Math","floor","random","App","state","food","clickedfood","setState","showAlert","indexOf","push","console","log","handleIncrement","makeShuffle","showSuccess","this","map","key","clickedImage","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kzDAYeA,MATf,WACI,OACI,yBAAKC,UAAU,4BACX,yBAAKC,MAAM,oBAAX,yBACA,yBAAKA,MAAM,oBAAX,0C,MCaGC,MAjBf,WACI,OACI,yBAAKF,UAAU,cACX,qEAGA,6EAGA,kFCDGG,G,MARD,SAACC,GAAD,OACZ,yBAAKJ,UAAU,OAAOK,QAAS,kBAAMD,EAAME,mBAAmBF,EAAMG,MAClE,yBAAKP,UAAU,iBACb,yBAAKQ,IAAKJ,EAAMK,KAAMC,IAAKN,EAAMO,Y,MCUxBC,MAbf,SAAgBR,GAEZ,OACI,yBAAKJ,UAAU,qBACX,uBAAGA,UAAU,gBAAb,eAGA,uBAAGA,UAAU,sBAAb,iBAAiDI,EAAMS,MAAvD,gBAA2ET,EAAMU,Y,aCD7F,SAASC,EAAQC,GACf,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADD,EAElB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAMG,GAFwB,KAI3C,OAAOH,E,IAoGMO,E,4MA/FbC,MAAQ,CACNC,KAAMA,EACNZ,MAAO,EACPC,SAAU,EACVY,YAAa,I,EAGfpB,mBAAqB,SAACC,GAEpB,IAAImB,EAAc,EAAKF,MAAME,YACzBb,EAAQ,EAAKW,MAAMX,MACnBC,EAAW,EAAKU,MAAMV,SAC1B,EAAKa,SAAS,CACZC,UAAW,KAIoB,IAA7BF,EAAYG,QAAQtB,IAEtBmB,EAAYI,KAAKvB,GACjBwB,QAAQC,IAAIN,GAEZ,EAAKO,kBAEL,EAAKC,eAEyB,KAArB,EAAKV,MAAMX,MAEpB,EAAKc,SAAS,CACZQ,YAAa,EACbtB,MAAO,EACPa,YAAa,MAMf,EAAKC,SAAS,CACZd,MAAO,EACPa,YAAa,KAEfK,QAAQC,IAAI,aACZ,EAAKL,SAAS,CACZC,UAAW,KAIXf,EAAQC,GACV,EAAKa,SAAS,CACZb,SAAUD,K,EAOhBoB,gBAAkB,WAEhB,EAAKN,SAAS,CAAEd,MAAO,EAAKW,MAAMX,MAAQ,K,EAI5CqB,YAAc,WACZ,EAAKP,SAAS,CAAEF,KAAMV,EAAQU,M,uDAItB,IAAD,OACP,OACE,yBAAKzB,UAAU,mBACZ,6BAED,kBAAC,EAAD,CACEa,MAAOuB,KAAKZ,MAAMX,MAClBC,SAAUsB,KAAKZ,MAAMV,YAGvB,kBAAC,EAAD,MACA,yBAAKd,UAAU,OACZoC,KAAKZ,MAAMC,KAAKY,KAAI,SAACZ,GAAD,OACnB,kBAAC,EAAD,CAAOnB,mBAAoB,EAAKA,mBAC9BgC,IAAKb,EAAKlB,GACVA,GAAIkB,EAAKlB,GACTE,KAAMgB,EAAKhB,KACXE,MAAOc,EAAKd,MACZe,YAAa,EAAKa,mBAIxB,kBAAC,EAAD,W,GA3FUC,aCLEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAEP,kBAAC,EAAD,MAEAC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.b400d509.chunk.js","sourcesContent":["import React from 'react';\nimport \"./footer.css\";\n\nfunction Footer() {\n    return (\n        <nav className=\"footer sticky-footer row\">\n            <div class=\"footer-game-name\">Clicky-Game-React-App</div>\n            <div class=\"footer-copyright\">Â© Copyright 2020 Brooke Guarienti</div>\n        </nav>\n    );\n}\n\nexport default Footer;","import React from 'react';\nimport \"./header.css\";\n\nfunction Header() {\n    return(\n        <div className=\"header row\">\n            <h2>\n            Food From Around The World Click-Game\n            </h2>\n            <p>\n            Be sure to click on a plate of food only ONCE! \n            </p>\n            <p>\n            If you click on a plate more than once, you lose!\n            </p>\n\n        </div>\n    );\n}\n\nexport default Header;","import React from \"react\";\nimport \"./imgContainer.css\";\n\nconst Cards = (props) => (\n  <div className=\"card\" onClick={() => props.handleClickedImage(props.id)}>\n    <div className=\"img-container\">\n      <img alt={props.name} src={props.image} />\n    </div>\n  </div>\n);\n\nexport default Cards;\n","import React from 'react';\nimport \"./navbar.css\";\n\nfunction Navbar(props) {\n    //The message, score and top Score are being rendered from the App\n    return (\n        <nav className=\"navbar sticky-top\">\n            <p className=\"navbar-brand\">Clicky Game</p>\n            {/* allow for message to be placed if we wanted one for each click, win, topscore, etc */}\n            {/* <p className=\"navbar-brand\">{props.message}</p> */}\n            <p className=\"navbar-brand score\">Your Score is {props.score} | Top Score {props.topScore}</p>\n        </nav>\n\n    );\n}\n\nexport default Navbar;","import React, { Component } from \"react\";\nimport Footer from \"./components/footer\";\nimport Header from \"./components/header\";\nimport Cards from \"./components/imgContainer\";\nimport Navbar from \"./components/navbar\";\nimport food from \"./food.json\";\nimport \"./App.css\";\n\n// shuffle upon each click\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nclass App extends Component {\n  // this is setting the variables of the game that will change as a state\n  state = {\n    food: food,\n    score: 0,\n    topScore: 0,\n    clickedfood: [],\n  };\n\n  handleClickedImage = (id) => {\n    // assign the state of the empty array to a let - this allows for the variable to be updated\n    let clickedfood = this.state.clickedfood;\n    let score = this.state.score;\n    let topScore = this.state.topScore;\n    this.setState({\n      showAlert: 0,\n    });\n\n    // if the clicked image has an id that is not in the array\n    if (clickedfood.indexOf(id) === -1) {\n      // push that id into the array to be stored\n      clickedfood.push(id);\n      console.log(clickedfood);\n      // run the score function\n      this.handleIncrement();\n      // run the reshuffle function after each click\n      this.makeShuffle();\n      // if the score = 16 then showSuccess to equal 1\n    } else if (this.state.score === 16) {\n      // alert player wins\n      this.setState({\n        showSuccess: 1,\n        score: 0,\n        clickedfood: [],\n      });\n      // all else, restart the score\n      // for example, if the id of the img clicked is already in the array\n    } else {\n      // alert player loss\n      this.setState({\n        score: 0,\n        clickedfood: [],\n      });\n      console.log(\"duplicate\");\n      this.setState({\n        showAlert: 1,\n      });\n    }\n    // if the score is greater than the topScore, then set new topScore to score\n    if (score > topScore) {\n      this.setState({\n        topScore: score,\n      });\n    }\n  };\n\n  // handleIncrement increases this.state.score by 1\n  // this increase the score of the game by 1\n  handleIncrement = () => {\n    // setState updates a components states\n    this.setState({ score: this.state.score + 1 });\n  };\n\n  // shuffle the images\n  makeShuffle = () => {\n    this.setState({ food: shuffle(food) });\n  };\n\n  // render the Navbar, Header, Footer, and Image Container to the page\n  render() {\n    return (\n      <div className=\"container-fluid\">\n         <div>\n        {/* Navbar render score and top score */}\n        <Navbar\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n        </div>\n        <Header />\n        <div className=\"row\">\n          {this.state.food.map((food) => (\n            <Cards handleClickedImage={this.handleClickedImage}\n              key={food.id}\n              id={food.id}\n              name={food.name}\n              image={food.image}\n              clickedfood={this.clickedImage}\n            />\n          ))}\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}